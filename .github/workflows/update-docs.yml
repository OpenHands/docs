name: Sync docs folder

on:
  repository_dispatch:
    types: [update]
  workflow_dispatch:
    inputs:
      module:
        description: "Module/repo name (without owner), e.g. agent-sdk"
        required: true
      branch:
        description: "Branch to read from the source repo"
        required: false
        default: "main"
      ref:
        description: "Specific ref (SHA/tag/branch). Overrides branch if provided."
        required: false

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      TOKEN: ${{ secrets.ALLHANDS_BOT_GITHUB_PAT || secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Resolve inputs/env
        id: cfg
        shell: bash
        run: |
          set -euo pipefail
          EVENT="${{ github.event_name }}"

          SUBDIR="docs"
          if [[ "$EVENT" == "workflow_dispatch" ]]; then
            MODULE="${{ inputs.module }}"
            BRANCH="${{ inputs.branch || 'main' }}"
            REF="${{ inputs.ref || '' }}"
          else
            MODULE="${{ github.event.client_payload.module }}"
            BRANCH="${{ github.event.client_payload.branch || 'main' }}"
            REF="${{ github.event.client_payload.ref || '' }}"
          fi

          if [[ -z "${MODULE}" ]]; then
            echo "ERROR: client_payload.module (or inputs.module) is required." >&2
            exit 1
          fi

          OWNER="${{ github.repository_owner }}"
          REPO="https://github.com/${OWNER}/${MODULE}.git"

          if [[ -z "${REF}" ]]; then
            REF="${BRANCH}"
          fi

          DEST_PREFIX="${MODULE}"

          echo "REPO=$REPO"           >> "$GITHUB_OUTPUT"
          echo "REF=$REF"             >> "$GITHUB_OUTPUT"
          echo "SUBDIR=$SUBDIR"       >> "$GITHUB_OUTPUT"
          echo "DEST_PREFIX=$DEST_PREFIX" >> "$GITHUB_OUTPUT"
          echo "MODULE=$MODULE"       >> "$GITHUB_OUTPUT"

      - name: Configure Git author
        run: |
          git config user.name "all-hands-bot"
          git config user.email "contact@all-hands.dev"

      - name: Vendor ${{ steps.cfg.outputs.SUBDIR }} into ${{ steps.cfg.outputs.DEST_PREFIX }} (git subtree)
        env:
          REPO: ${{ steps.cfg.outputs.REPO }}
          REF: ${{ steps.cfg.outputs.REF }}
          SUBDIR: ${{ steps.cfg.outputs.SUBDIR }}
          DEST_PREFIX: ${{ steps.cfg.outputs.DEST_PREFIX }}
          TOKEN: ${{ env.TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          tmpdir="$(mktemp -d)"
          echo "Using temp dir: $tmpdir"

          auth_repo="$REPO"
          if [[ "$auth_repo" == https://github.com/* && -n "${TOKEN:-}" ]]; then
            auth_repo="${auth_repo/https:\/\/github.com/https:\/\/x-access-token:${TOKEN}@github.com}"
          fi

          git clone --no-tags --filter=blob:none "$auth_repo" "$tmpdir/src"
          pushd "$tmpdir/src" >/dev/null

          git fetch --no-tags --quiet origin "$REF"
          git checkout --quiet FETCH_HEAD

          if [[ ! -d "$SUBDIR" ]]; then
            echo "ERROR: '$SUBDIR' does not exist in $REPO at ref $REF" >&2
            exit 1
          fi

          git subtree split --prefix="$SUBDIR" -b subtree-split
          popd >/dev/null

          if git remote get-url upstream-temp >/dev/null 2>&1; then
            git remote remove upstream-temp
          fi
          git remote add upstream-temp "file://$tmpdir/src"

          if [[ -d "$DEST_PREFIX" && -n "$(ls -A "$DEST_PREFIX" 2>/dev/null || true)" ]]; then
            echo "Updating existing subtree at $DEST_PREFIX"
            git subtree pull --prefix="$DEST_PREFIX" upstream-temp subtree-split --squash
          else
            echo "Adding new subtree at $DEST_PREFIX"
            mkdir -p "$DEST_PREFIX"
            git add -A "$DEST_PREFIX"
            git commit -m "chore(subtree): prepare $DEST_PREFIX" || true
            git subtree add --prefix="$DEST_PREFIX" upstream-temp subtree-split --squash
          fi

      - name: Commit and push if changed
        env:
          MODULE: ${{ steps.cfg.outputs.MODULE }}
        run: |
          set -euo pipefail
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          SRC_SHA="${{ github.event.client_payload.sha || '' }}"
          MSG="update: ${MODULE} ${{ github.event.client_payload.ref || inputs.ref || '' }} ${SRC_SHA}"
          git commit -am "$MSG"
          git push
